<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Programming Notes]]></title>
  <link href="http://skypy.github.com/atom.xml" rel="self"/>
  <link href="http://skypy.github.com/"/>
  <updated>2013-01-08T14:09:20+05:30</updated>
  <id>http://skypy.github.com/</id>
  <author>
    <name><![CDATA[Kinjal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Power of Closure]]></title>
    <link href="http://skypy.github.com/blog/closure/"/>
    <updated>2013-01-03T18:31:00+05:30</updated>
    <id>http://skypy.github.com/blog/closure</id>
    <content type="html"><![CDATA[<p>To begin with closure, let&#8217;s take a quick look at scope.</p>

<p>What is Scope ? It deifnes the environemnt or area where variables or functions are available. Suppose we have a method <code>foo()</code>
and we create a variable <code>x</code> inside <code>foo()</code> . <br />
So it is clear that the variable <code>x</code> is only available inside <code>foo()</code> (unless explicitly defined as global).
Now let&#8217;s think, there is another function that wants to use this local variable <code>x</code> or the other way let me say the other function wants to use the state of function <code>foo()</code>.</p>

<p>How to do this ?</p>

<p>Look at this image.<br />
<a href="http://s1290.beta.photobucket.com/user/skypya/media/Blog/closure_zps340b5344.jpg.html" target="_blank"><img src="http://i1290.photobucket.com/albums/b521/skypya/Blog/closure_zps340b5344.jpg" border="0" alt="Photobucket"/></a></p>

<p>Let me explain the image with a small example in lisp.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun foo(x)
</span><span class='line'>       (defun bar(n) (+ n x)))</span></code></pre></td></tr></table></div></figure>


<p>In the code <code>foo()</code> points to the outer region in the image and <code>bar()</code> is the inner region. Notice <code>x</code> is actually in the scope of <code>foo()</code>. However the inner method <code>bar()</code> has access to the variable <code>x</code>. This is closure. <em>The inner region is associated with an
environment that is the outer region</em>.<br />
The vairable <code>x</code> is a free varible and accessible to <code>foo()</code> and <code>bar()</code>. Interesting fact is that there will be no problem to acccess the free variable <code>x</code> inside the method <code>bar()</code> even though the outher method <code>foo()</code> is returned.</p>

<p>Converting the above code to use an annonymous function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defun foo(x)
</span><span class='line'>       #' (lambda (x) (+ x 10)))</span></code></pre></td></tr></table></div></figure>


<p>Both of the above codes are creating closure - one with named function and the other with
annonymous function. Note that we frequently use annonymous function but that doesn&#8217;t mean it is creating a closure. The function must require an environment to form a closure
same as the way a named function does.</p>

<p>There are different languages which support closure, for example, Lisp, Javascirpt, pyhton. And there are languages which do not support Closure, examples are C, C++, Java.</p>

<p>Let me write a small code in pyhton that has closure.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def outer(num1, num2):
</span><span class='line'>  def inner(num):
</span><span class='line'>    return num + num1 + num2
</span><span class='line'>  return inner</span></code></pre></td></tr></table></div></figure>


<p>If we call the above function <code>outer(2, 3)(10)</code>, it will output <code>15</code>.</p>

<p>Now, Let&#8217;s output the same result using a <em>callback</em> function.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def foo(num1, num2, callback):
</span><span class='line'>    n = num1 + num2
</span><span class='line'>    return callback(n)</span></code></pre></td></tr></table></div></figure>


<p>Calling the function <code>foo()</code> with the arguments <code>num1</code>, <code>num2</code> and a callback function
using <em>lambda</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>foo(2, 3, lambda x : x + 10)</span></code></pre></td></tr></table></div></figure>


<p>The outout is <code>15</code>.</p>

<p>So here is the question. How is closure different from a callback function?
If we generalize the question, it would be - <em>how is closure different from the
similar techniques available in other languages which do not support closure, for
example, function pointer in C, annonymous inner class in java</em>?</p>

<p>The main difference is, in the above example the method <code>inner</code> knows that it came from the method <code>outer</code>, that is, <code>inner</code> has idea of it&#8217;s environment. But callback is not. It is just a <em>block of executable code which can be passed as an argument to other function</em>.</p>

<p>See also <br />
1. <a href="http://martinfowler.com/bliki/Closure.html">Closure</a> <br />
2. <a href="http://www.javaworld.com/javaworld/jw-06-2008/jw-06-closures.html">Closure and inner class</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singleton Pattern]]></title>
    <link href="http://skypy.github.com/blog/singleton-pattern/"/>
    <updated>2012-12-24T23:14:00+05:30</updated>
    <id>http://skypy.github.com/blog/singleton-pattern</id>
    <content type="html"><![CDATA[<p>This post is about brief explanation of singleton pattern. it&#8217;s structure, usage and implementations in different languages - java, javascript and python.</p>

<blockquote><p>In mathematics the term singleton defines a set exactly having one element.</p></blockquote>


<p>So an example is <code>{a}</code> since it has one element.
In design patterns, as per <a href="http://en.wikipedia.org/wiki/Gang_of_Four_(software)">GOF</a> the intent of singleton pattern is to ensure that a class has one instance and provide a global point of access to it.</p>

<h6>Implementation -</h6>

<ul>
<li>The class is designed in such a way that only once instance can ever be created.</li>
<li>Operation of creating the instance is hidden by declaring it private member of the class. Also make it static so the object is read only.</li>
</ul>


<p>Let&#8217;s look at a java basic non thread safe singleton implementation</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">MySingleton</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">MySingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">MySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">MySingleton</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// prevents new MySingleton()</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getX</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;X&quot;</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getY</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;Y&quot;</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the constructor is private. It will throw error if a client direcrly wants to initialize the object. It makes sure that there will be only one instance of the class.</p>

<h6>How to use this class?</h6>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MySingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getX</span><span class="o">();</span>
</span><span class='line'><span class="n">MySingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getY</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Wrong approach to initialize it-</h6>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MySingleton</span> <span class="n">mySingleton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySingleton</span><span class="o">();</span>
</span><span class='line'><span class="n">mySingleton</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h6>How is singleton different from a static class? <br /></h6>

<p>Singleton, is a pattern whose instance is created only once and can be treated just like an normal instance. But static class allows only static methods. It is more of a procedural approach.</p>

<h6>Usage</h6>

<p>There are lot of bad reputation about singleton pattern. Singleton is like <em>creating a global variable and access it like you are creating a new instance of the class</em>. And it is always <em>good to avoid global</em>. However good example of using singleton is creating config class of an application or reading/writting a log file.</p>

<!--more-->


<h3>Singleton in javascript</h3>

<p>When it comes to javascript, Singleton pattern seems to be more useful compared to other static language like java. The bad part of javascript is the use of <em>global</em>. By using Singleton pattern we can avoid using global, introduce namespace and write modularize code in javasciprt.</p>

<p>Here is a very basic example</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Page</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">//namespace</span>
</span><span class='line'><span class="nx">Page</span><span class="p">.</span><span class="nx">Singleton</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">attribute1</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'> <span class="nx">attribute2</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'> <span class="nx">foo</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>so we can do, for example,  <code>Page.Singleton.attribute1</code> to retrieve values. Note that, we can also delete members from this class. This behavior is different from other object oriented languages like C++, java.</p>

<p>The methods in the class are public(the default scope). However there is way to create private members.</p>

<p>Let&#8217;s look at different implementation of singleton in javascript with closure -</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Page</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">Page</span><span class="p">.</span><span class="nx">Singleton</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">privateAttr1</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="c1">// not accessible outside which is good</span>
</span><span class='line'>  <span class="nx">privateAttr2</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">publicAttr</span><span class="o">:</span> <span class="nx">privateAttr1</span> <span class="c1">// public method</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">)();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here any member declared inside the annonymous fucntion is accessible only within that same closure. Public member can be placed inside <code>return</code>.</p>

<p>So we can do <code>Page.Singleton.publicAttr1</code>, but not <code>Page.Singleton.privateAttr1</code></p>

<h3>Singleton in python</h3>

<p>While trying to implement singleton pattern in python, I came accross a nice concept from <a href="http://code.activestate.com/recipes/66531/#c20">Alex Martelli&#8217;s post</a>. It is Borg pattern. It focuses on state rather than identity. There can be multiple instances but with shared state.</p>

<p>Here is the <a href="http://code.activestate.com/recipes/66531/#c20">Borg pattern</a></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Borg</span><span class="p">:</span>
</span><span class='line'>  <span class="n">_shared_state</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_shared_state</span>
</span></code></pre></td></tr></table></div></figure>


<h6>How to use it?</h6>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Config</span><span class="p">(</span><span class="n">Borg</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">client</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="n">Borg</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">client</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">client</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;Config =&gt; </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span><span class="bp">self</span><span class="o">.</span><span class="n">client</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s see the result</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">Config</span><span class="p">(</span><span class="s">&#39;XML&#39;</span><span class="p">)</span> <span class="c"># output: XML</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">Config</span><span class="p">(</span> <span class="p">)</span> <span class="c"># output: XML</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">Config</span><span class="p">(</span><span class="s">&#39;CSV&#39;</span><span class="p">)</span> <span class="c"># output: CSV</span>
</span></code></pre></td></tr></table></div></figure>


<p>So multiple instances of the class <code>Config</code> is allowed but they all share same state. That is why the value of <code>b</code> remains <code>XML</code></p>

<p>References: <br />
1. <a href="http://en.wikipedia.org/wiki/Gang_of_Four_(software)">GOF</a> <br />
2. <a href="http://code.activestate.com/recipes/66531/#c20">Alex Martelli&#8217;s code snippet</a> <br />
3. <a href="http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X">Pro JavaScript Design Patterns</a></p>
]]></content>
  </entry>
  
</feed>
